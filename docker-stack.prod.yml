version: "3.8"
services:
  bugzkit-api:
    image: while1618/bugzkit-api:1.0.0
    environment:
      APP_NAME: ${APP_NAME:-bugzkit}
      API_PORT: ${API_PORT:-8080}
      UI_URL: ${UI_URL:-https://bugzkit.com}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE:-bugzkit}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DATABASE: ${REDIS_DATABASE:-0}
      SMTP_HOST: ${SMTP_HOST:-smtp.sendgrid.net}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USER:-apikey}
      SMTP_SENDER: ${SMTP_SENDER:-office@bugzkit.com}
      ACCESS_TOKEN_DURATION: ${ACCESS_TOKEN_DURATION:-900}
      REFRESH_TOKEN_DURATION: ${REFRESH_TOKEN_DURATION:-604800}
      VERIFY_EMAIL_TOKEN_DURATION: ${VERIFY_EMAIL_TOKEN_DURATION:-900}
      RESET_PASSWORD_TOKEN_DURATION: ${RESET_PASSWORD_TOKEN_DURATION:-900}
    secrets:
      - postgres_password
      - redis_password
      - user_password
      - smtp_password
      - jwt_secret
      - google_client_id
      - google_client_secret
    depends_on:
      - postgres
      - redis
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${API_PORT:-8080}/actuator/health",
        ]
      start_period: 10s
      interval: 30s
      retries: 3
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.bugzkit-api.rule=Host(`api.bugzkit.com`)
      - traefik.http.routers.bugzkit-api.entrypoints=websecure
      - traefik.http.routers.bugzkit-api.tls=true
      - traefik.http.services.bugzkit-api.loadbalancer.server.port=8080
      - traefik.http.routers.bugzkit-api.tls.certresolver=myresolver

  postgres:
    image: postgres:17.2-alpine
    environment:
      PGPORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DATABASE:-bugzkit}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${POSTGRES_USER:-postgres}",
          "-d",
          "${POSTGRES_DATABASE:-bugzkit}",
        ]
      start_period: 10s
      interval: 30s
      retries: 3
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - web

  redis:
    image: redis:7.4.1
    environment:
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DATABASE: ${REDIS_DATABASE:-0}
    command:
      [
        "sh",
        "-c",
        "redis-server --port $$REDIS_PORT --requirepass $$(cat /run/secrets/redis_password)",
      ]
    secrets:
      - redis_password
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-cli -h localhost -p $$REDIS_PORT -a $$(cat /run/secrets/redis_password) ping",
        ]
      start_period: 10s
      interval: 30s
      retries: 3
    volumes:
      - redis_data:/data
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - web

  bugzkit-ui:
    image: while1618/bugzkit-ui:1.0.0
    environment:
      PORT: ${UI_PORT:-5173}
      ORIGIN: ${UI_URL:-https://bugzkit.com}
      PUBLIC_APP_NAME: ${APP_NAME:-bugzkit}
      PUBLIC_API_URL: http://bugzkit-api:${API_PORT:-8080}
    secrets:
      - jwt_secret
    command:
      - sh
      - -c
      - |
        export JWT_SECRET="$$(cat /run/secrets/jwt_secret)" && \
        exec node build
    depends_on:
      - bugzkit-api
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${UI_PORT:-5173}" ]
      start_period: 10s
      interval: 30s
      retries: 3
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.bugzkit-ui.rule=Host(`bugzkit.com`) || Host(`www.bugzkit.com`)
      - traefik.http.routers.bugzkit-ui.entrypoints=websecure
      - traefik.http.routers.bugzkit-ui.tls=true
      - traefik.http.services.bugzkit-ui.loadbalancer.server.port=5173
      - traefik.http.routers.bugzkit-ui.tls.certresolver=myresolver

  traefik:
    image: traefik:v3.3
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --providers.docker=true
      - --providers.docker.network=web
      - --providers.docker.exposedbydefault=false
      - --certificatesresolvers.myresolver.acme.email=office@bugzkit.com
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
    networks:
      - web

volumes:
  postgres_data:
  redis_data:
  letsencrypt:

networks:
  web:
    driver: overlay

secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  smtp_password:
    external: true
  user_password:
    external: true
  google_client_id:
    external: true
  google_client_secret:
    external: true
